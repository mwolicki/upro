// Generated by BUCKLESCRIPT VERSION 4.0.5, PLEASE EDIT WITH CARE
'use strict';

var List = require("bs-platform/lib/js/list.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Caml_exceptions = require("bs-platform/lib/js/caml_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var $$Error = Caml_exceptions.create("Parser-Uprolog.MenhirBasics.Error");

function _menhir_goto_rev_relation_args(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _menhir_s,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            52,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok !== 1) {
      if (_tok >= 6) {
        var _menhir_env$1 = _menhir_discard(_menhir_env);
        var _tok$1 = _menhir_env$1[/* _menhir_token */2];
        if (typeof _tok$1 === "number") {
          if (_menhir_env$1[/* _menhir_error */3]) {
            throw [
                  Caml_builtin_exceptions.assert_failure,
                  /* tuple */[
                    "parser.ml",
                    66,
                    12
                  ]
                ];
          }
          _menhir_env$1[/* _menhir_error */3] = true;
          return _menhir_errorcase(_menhir_env$1, _menhir_stack$1, /* MenhirState9 */0);
        } else if (_tok$1.tag) {
          return _menhir_run5(_menhir_env$1, _menhir_stack$1, /* MenhirState9 */0, _tok$1[0]);
        } else {
          return _menhir_run4(_menhir_env$1, _menhir_stack$1, /* MenhirState9 */0, _tok$1[0]);
        }
      } else {
        exit = 1;
      }
    } else {
      var _menhir_env$2 = _menhir_discard(_menhir_env);
      var _menhir_stack$2 = _menhir_stack[0];
      var _v_001 = /* tuple */[
        _menhir_stack[1],
        List.rev(_v)
      ];
      var _v$1 = /* `Relation */[
        260469468,
        _v_001
      ];
      if (_menhir_env$2[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                101,
                10
              ]
            ];
      }
      var _tok$2 = _menhir_env$2[/* _menhir_token */2];
      var exit$1 = 0;
      if (typeof _tok$2 === "number" && _tok$2 === 4) {
        var _menhir_env$3 = _menhir_discard(_menhir_env$2);
        var _v_001$1 = _menhir_stack$2[1];
        var _v$2 = /* :: */[
          _v$1,
          _v_001$1
        ];
        return _menhir_goto_rev_expressions(_menhir_env$3, _menhir_stack$2[0], _v$2);
      } else {
        exit$1 = 2;
      }
      if (exit$1 === 2) {
        if (_menhir_env$2[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  134,
                  12
                ]
              ];
        }
        _menhir_env$2[/* _menhir_error */3] = true;
        throw $$Error;
      }
      
    }
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              140,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    return _menhir_errorcase(_menhir_env, _menhir_stack, _menhir_s);
  }
  
}

function _menhir_discard(_menhir_env) {
  var lexer = _menhir_env[/* _menhir_lexer */0];
  var lexbuf = _menhir_env[/* _menhir_lexbuf */1];
  var _tok = Curry._1(lexer, lexbuf);
  return /* record */[
          /* _menhir_lexer */lexer,
          /* _menhir_lexbuf */lexbuf,
          /* _menhir_token */_tok,
          /* _menhir_error */false
        ];
}

function _menhir_errorcase(_, __menhir_stack, __menhir_s) {
  while(true) {
    var _menhir_s = __menhir_s;
    var _menhir_stack = __menhir_stack;
    if (_menhir_s) {
      throw $$Error;
    } else {
      __menhir_s = _menhir_stack[1];
      __menhir_stack = _menhir_stack[0];
      continue ;
    }
  };
}

function _menhir_run4(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* `Var */[
    4298439,
    _v
  ];
  return _menhir_goto_single_arg(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_rev_expressions(_menhir_env, _menhir_stack, _v) {
  var _menhir_stack$1 = /* tuple */[
    _menhir_stack,
    _v
  ];
  if (_menhir_env[/* _menhir_error */3]) {
    throw [
          Caml_builtin_exceptions.assert_failure,
          /* tuple */[
            "parser.ml",
            261,
            6
          ]
        ];
  }
  var _tok = _menhir_env[/* _menhir_token */2];
  var exit = 0;
  if (typeof _tok === "number") {
    if (_tok === 5) {
      var _v$1 = List.rev(_v);
      if (_menhir_env[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                319,
                10
              ]
            ];
      }
      var _tok$1 = _menhir_env[/* _menhir_token */2];
      var exit$1 = 0;
      if (typeof _tok$1 === "number" && _tok$1 === 5) {
        return _v$1;
      } else {
        exit$1 = 2;
      }
      if (exit$1 === 2) {
        if (_menhir_env[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  365,
                  12
                ]
              ];
        }
        _menhir_env[/* _menhir_error */3] = true;
        throw $$Error;
      }
      
    } else {
      exit = 1;
    }
  } else if (_tok.tag === 1) {
    var _menhir_stack_001 = _tok[0];
    var _menhir_stack$2 = /* tuple */[
      _menhir_stack$1,
      _menhir_stack_001
    ];
    var _menhir_env$1 = _menhir_discard(_menhir_env);
    var _tok$2 = _menhir_env$1[/* _menhir_token */2];
    var exit$2 = 0;
    if (typeof _tok$2 === "number" && _tok$2 === 3) {
      var _menhir_env$2 = _menhir_discard(_menhir_env$1);
      var _tok$3 = _menhir_env$2[/* _menhir_token */2];
      if (typeof _tok$3 === "number") {
        if (_menhir_env$2[/* _menhir_error */3]) {
          throw [
                Caml_builtin_exceptions.assert_failure,
                /* tuple */[
                  "parser.ml",
                  291,
                  16
                ]
              ];
        }
        _menhir_env$2[/* _menhir_error */3] = true;
        throw $$Error;
      } else if (_tok$3.tag) {
        return _menhir_run5(_menhir_env$2, _menhir_stack$2, /* MenhirState3 */1, _tok$3[0]);
      } else {
        return _menhir_run4(_menhir_env$2, _menhir_stack$2, /* MenhirState3 */1, _tok$3[0]);
      }
    } else {
      exit$2 = 2;
    }
    if (exit$2 === 2) {
      if (_menhir_env$1[/* _menhir_error */3]) {
        throw [
              Caml_builtin_exceptions.assert_failure,
              /* tuple */[
                "parser.ml",
                295,
                12
              ]
            ];
      }
      _menhir_env$1[/* _menhir_error */3] = true;
      throw $$Error;
    }
    
  } else {
    exit = 1;
  }
  if (exit === 1) {
    if (_menhir_env[/* _menhir_error */3]) {
      throw [
            Caml_builtin_exceptions.assert_failure,
            /* tuple */[
              "parser.ml",
              371,
              8
            ]
          ];
    }
    _menhir_env[/* _menhir_error */3] = true;
    throw $$Error;
  }
  
}

function _menhir_run5(_menhir_env, _menhir_stack, _menhir_s, _v) {
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  var _v$1 = /* `Atom */[
    726615281,
    _v
  ];
  return _menhir_goto_single_arg(_menhir_env$1, _menhir_stack, _menhir_s, _v$1);
}

function _menhir_goto_single_arg(_menhir_env, _menhir_stack, _menhir_s, _v) {
  if (_menhir_s) {
    var _v$1 = /* :: */[
      _v,
      /* [] */0
    ];
    return _menhir_goto_rev_relation_args(_menhir_env, _menhir_stack, _menhir_s, _v$1);
  } else {
    var _v_001 = _menhir_stack[2];
    var _v$2 = /* :: */[
      _v,
      _v_001
    ];
    return _menhir_goto_rev_relation_args(_menhir_env, _menhir_stack[0], _menhir_stack[1], _v$2);
  }
}

function parse(lexer, lexbuf) {
  var _menhir_env = /* record */[
    /* _menhir_lexer */lexer,
    /* _menhir_lexbuf */lexbuf,
    /* _menhir_token : () */0,
    /* _menhir_error */false
  ];
  var _menhir_stack_001 = _menhir_env[/* _menhir_lexbuf */1][/* lex_curr_p */11];
  var _menhir_stack = /* tuple */[
    /* () */0,
    _menhir_stack_001
  ];
  var _menhir_env$1 = _menhir_discard(_menhir_env);
  return _menhir_goto_rev_expressions(_menhir_env$1, _menhir_stack, /* [] */0);
}

exports.$$Error = $$Error;
exports.parse = parse;
/* No side effect */
